// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean     @default(false)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Character {
  id        String          @id @default(uuid())
  userId    String
  bio       Bio?
  ap        Int             @default(10)
  maxAp     Int             @default(10)
  hp        Int             @default(10)
  maxHp     Int             @default(10)
  gold      Int             @default(1)
  silver    Int             @default(1000)
  inventory InventoryItem[]
  role      Role
  class     Class           @relation(fields: [role], references: [id])
  abilities Ability[]
}

model Class {
  id         Role        @id
  bios       Character[]
  categories Category[]
}

model Bio {
  character   Character @relation(fields: [characterId], references: [id])
  characterId String    @id @unique // relation scalar field (used in the `@relation` attribute above)
  name        String
  age         Int
  height      String
  appearance  String
  clothing    String
  gait        String
  location    String
  nation      String
  ideal       String
  flaw        String
  dream       String
}

model InventoryItem {
  id          Int       @id @default(autoincrement())
  name        String
  characterId String
  character   Character @relation(fields: [characterId], references: [id])
}

model Ability {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  order       Int
  apCost      Int
  description String
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  Int
  characters  Character[]
  extra       String?
}

model Category {
  id        Int       @id @default(autoincrement())
  abilities Ability[]
  name      String
  class     Class     @relation(fields: [role], references: [id])
  role      Role
}

enum Role {
  FIGHTER
  INVOKER
  RANGER
  NATURALIST
  DOCTOR
  SPY
  WIZARD
  MAGICIAN
}
